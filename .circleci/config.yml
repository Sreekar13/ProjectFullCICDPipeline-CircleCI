version: 2.1

orbs:
  slack: circleci/slack@4.1
  aws-cli: circleci/aws-cli@1.4.0

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm i oauth
            npm i oauth-sign
            npm run build
      - save_cache:
          paths: frontend/node_modules
          key: frontend-nodemodules
      - save_cache:
          paths: frontend/dist
          key: forntend-build-dist
      - slack/notify:
          event: fail
          template: basic_fail_1


  build-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Building backend artifacts from the source code
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: backend/node-modules
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-nodemodules
      - run: 
          name: Testing frontend code
          command: |
            cd frontend
            npm install
            npm i oauth
            npm i oauth-sign
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Testing backend code
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
    

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Analyzing Frontend code
          command: |
            cd frontend
            npm install
            npm i oauth
            npm i oauth-sign            
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Analyzing backend code
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=UdaPeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=UdaPeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[server]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
      - save_cache:
          key: inventory-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - .circleci/ansible/inventory.txt
      - run: cat .circleci/ansible/inventory.txt
              

workflows:
  default:
    jobs:
      #- build-frontend
      #- build-backend
      #- test-frontend:
      #    requires: [build-frontend]
      #- test-backend:
      #    requires: [build-backend]
      #- scan-frontend:
      #    requires: [test-frontend]
      #- scan-backend:
      #    requires: [test-backend]
      - deploy-infrastructure
      #    requires: [scan-frontend,scan-backend]
