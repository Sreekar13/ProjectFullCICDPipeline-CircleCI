version: 2.1

orbs:
  slack: circleci/slack@4.1
  aws-cli: circleci/aws-cli@1.4.0

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm i oauth
            npm i oauth-sign
            npm run build
      - save_cache:
          paths: frontend/node_modules
          key: frontend-nodemodules
      - save_cache:
          paths: frontend/dist
          key: forntend-build-dist
      - slack/notify:
          event: fail
          template: basic_fail_1


  build-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Building backend artifacts from the source code
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: backend/node-modules
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-nodemodules
      - run: 
          name: Testing frontend code
          command: |
            cd frontend
            npm install
            npm i oauth
            npm i oauth-sign
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Testing backend code
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
    

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Analyzing Frontend code
          command: |
            cd frontend
            npm install
            npm i oauth
            npm i oauth-sign            
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Analyzing backend code
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Install tar and gzip
          command: |
            yum -y install tar gzip      
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=UdaPeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=UdaPeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[server]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - run: cat ~/inventory.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: 7f:13:36:4d:43:cd:1c:42:e8:68:f3:41:89:d2:6c:12
      - run:
          name: Install ansible dependencies
          command: |
            apk add --update ansible
      - run:
          name: Run ansible to configrure the server
          command: |
            ansible-playbook -i inventory.txt .circleci/ansible/configure-server.yml

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          key: backend-build

      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migration.log
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            cd backend
            VAR=$(! grep -q "has been executed successfully" migration.log; echo $? )
            curl -H "Content-Type: text/plain" -H "token: e6d371b7-e168-486d-9011-0dda1a6a3ab4" --request PUT --data "$VAR" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            cat migration.log
            echo $VAR  

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup
      - attach_workspace:
          at: ~/        
      - restore_cache:
          key: forntend-build-dist
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=$(tail -1 inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run: 
          name: Build frontend url into code
          command: |
            npm run install
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            aws s3 sync dist s3://udapeople-${CIRCLE_WORKFLOW_ID} --delete   



                

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      #- test-frontend:
      #    requires: [build-frontend]
      #- test-backend:
      #    requires: [build-backend]
      #- scan-frontend:
      #    requires: [test-frontend]
      #- scan-backend:
      #    requires: [test-backend]
      - deploy-infrastructure:
          requires: [build-frontend,build-backend]
      #    requires: [scan-frontend,scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [build-backend]
      - deploy-frontend:
          requires: [configure-infrastructure]